include ../../../mixins/docs.jade
//- Creates tab button. first is by default 'active'
//- +doc_example_tab_items("states_root", {
//-   "cli":     "cli", 
//-   "package": "package.json"
//- })

//- Create tab content item
//- locals.getContentStateTemplate("states_root.cli") gets state template generated by doc_example_tab_items
//- div(class!=locals.getContentStateTemplate("states_root.cli")): pre: code.language-bash.
//-   npm install infrastructure
  
//- div(class!=locals.getContentStateTemplate("states_root.package")): pre: code.language-javascript.
//-   "dependencies": {
//-     "infrastructure": "^1.0.0"
//-   }

include ../../../mixins/fs_ui.jade


.page-header: h1 Structures

p Structures are group of similar classes which will be instantiated and structured in tree-like structure.
p Lets define our structure in configuration. For the exampe, we will give the structure name "workers".

+doc_example_tab_items("structures_1", {
  "configuration":      "configuration"
})

div.code-block.large(class!=locals.getContentStateTemplate("structures_1.configuration"))
  .col-xs-2.fs-block
    +fs_block("structures_fs_1", {
      "app.js" :                          false,
      "config/structures/log.json":       false,
      "config/structures/workers.json":   true,
      "config/process_mode.json":         false,
    })
  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_1", "app.js")): pre: code.language-javascript.
    var infrastructure = require("infrastructure");
    infrastructure({ /* Write config here */ }, function(err, env) {
      if (err) { throw err; }
    });

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_1", "config/process_mode.json")): pre: code.language-javascript.
    "cluster"

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_1", "config/structures/log.json")): pre: code.language-javascript.
    {
      "engine":  "log",
      "options": { "sys": true, "debug": true }
    }
  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_1", "config/structures/workers.json")): pre: code.language-javascript.
    {
      "path": "workers"
    }

p
p This configuration shows that the structure files must be placed in folder "workers" (based on project root). Lets create the folder and some files in it.

+doc_example_tab_items("structures_2", {
  "configuration":      "configuration",
  "cli":                "cli",
})

div.code-block.large(class!=locals.getContentStateTemplate("structures_2.configuration"))
  .col-xs-2.fs-block
    +fs_block("structures_fs_2", {
      "app.js" :                          false,
      "config/structures/log.json":       false,
      "config/structures/workers.json":   false,
      "config/process_mode.json":         false,
      "workers/worker_1.js":              true,
      "workers/worker_2.js":              false,
    })
  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_2", "app.js")): pre: code.language-javascript.
    var infrastructure = require("infrastructure");
    infrastructure({ /* Write config here */ }, function(err, env) {
      if (err) { throw err; }

      // Check that workers are callable
      env.i.do("workers.worker_1.worker_1_method", "hello worker 1", function(err, response){
        console.log(response);
      });
      env.i.do("workers.worker_2.worker_2_method", "hello worker 2", function(err, response){
        console.log(response);
      });

    });

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_2", "workers/worker_1.js")): pre: code.language-javascript.
    function Worker_1(env){
      env.i.do("log.sys", "worker instantiated", "Worker_1");
    }
    Worker_1.prototype.worker_1_method = function(text, cb){
      cb(null, [text, "hello master"]);
    }
    module.exports = Worker_1;

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_2", "workers/worker_2.js")): pre: code.language-javascript.
    function Worker_2(env){
      env.i.do("log.sys", "worker instantiated", "Worker_2");
    }
    Worker_2.prototype.worker_2_method = function(text, cb){
      cb(null, [text, "hello master"]);
    }
    module.exports = Worker_2;

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_2", "config/process_mode.json")): pre: code.language-javascript.
    "cluster"

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_2", "config/structures/log.json")): pre: code.language-javascript.
    {
      "engine":  "log" ,
      "options": { "sys": true, "debug": true }
    }
  .col-xs-10.code-block.large(class!=locals.getStateFromFs("structures_fs_2", "config/structures/workers.json")): pre: code.language-javascript.
    {
      "path": "workers"
    }

div.code-block.large(class!=locals.getContentStateTemplate("structures_2.cli")): pre: code.language-bash.
  $> node app
  [sys]  [2015-11-23 22:04:01][logger]........................... options: sys, debug
  [sys]  [2015-11-23 22:04:01][worker]........................... log
  [sys]  [2015-11-23 22:04:01][worker started]................... 37ms, structures: log
  [sys]  [2015-11-23 22:04:02][application started].............. 450ms, process_mode: cluster, application mode: undefined
  [sys]  [2015-11-23 22:04:02][worker instantiated].............. Worker_1
  [sys]  [2015-11-23 22:04:02][worker instantiated].............. Worker_2
  [sys]  [2015-11-23 22:04:02][worker]........................... workers
  [sys]  [2015-11-23 22:04:02][worker started]................... 42ms, structures: workers
  [ 'hello worker 1', 'hello master' ]
  [ 'hello worker 2', 'hello master' ]

