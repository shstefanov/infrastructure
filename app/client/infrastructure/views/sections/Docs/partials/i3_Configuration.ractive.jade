include ../../../mixins/docs.jade
//- Creates tab button. first is by default 'active'
//- +doc_example_tab_items("states_root", {
//-   "cli":     "cli", 
//-   "package": "package.json"
//- })

//- Create tab content item
//- locals.getContentStateTemplate("states_root.cli") gets state template generated by doc_example_tab_items
//- div(class!=locals.getContentStateTemplate("states_root.cli")): pre: code.language-bash.
//-   npm install infrastructure
  
//- div(class!=locals.getContentStateTemplate("states_root.package")): pre: code.language-javascript.
//-   "dependencies": {
//-     "infrastructure": "^1.0.0"
//-   }

include ../../../mixins/fs_ui.jade


.page-header: h1 Configuration
.page-header: h2 Let's expand our configuration

p 
  | We passed the configuration object. 
  | But 
  mark infrastructure
  |  will try to find some files or folders in project root folder and will extend passed config.
  | Possible variants are:

+doc_example_tab_items("configuration_1", {
  "app_js":          "app.js",
  "config_json":     "config.json", 
  "config_js":       "config.js",
  "config_yml":      "config.yml",
  "config_folder":   "config folder",
  "command_line":    "command line",
})
div.code-block.large(class!=locals.getContentStateTemplate("configuration_1.app_js")): pre: code.language-javascript.
  var infrastructure = require("infrastructure");
  infrastructure({ /* Write config here */ }, function(err, env) {
    if (err) { throw err; }
  });
div.code-block.large(class!=locals.getContentStateTemplate("configuration_1.config_json")): pre: code.language-javascript.
  {
    "structures": {
      "log": {
        "engine":  "log",
        "options": { "sys": true, "debug": true }
      }
    }
  }
div.code-block.large(class!=locals.getContentStateTemplate("configuration_1.config_js")): pre: code.language-javascript.
  module.exports = {
    structures: {
      log: {
        engine:  "log",
        options: { sys: true, debug: true }
      }
    }
  };
div.code-block.large(class!=locals.getContentStateTemplate("configuration_1.config_yml")): pre: code.language-yaml.
  ---
    structures: 
      log: 
        engine: "log"
        options: 
          sys: true
          debug: true
div.code-block.large(class!=locals.getContentStateTemplate("configuration_1.command_line")): pre: code.language-bash.
  $> node app.js --config.structures.log.engine=log --config.structures.log.options.sys --config.structures.log.options.debug

div.code-block.large(class!=locals.getContentStateTemplate("configuration_1.config_folder"))
  .col-xs-2.fs-block
    +fs_block("conf_fs_1", {
      "app.js" :                      false,
      "config/structures/log.json":   true,
    })

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("conf_fs_1", "app.js")): pre: code.language-javascript.
    var infrastructure = require("infrastructure");
    infrastructure({ /* Write config here */ }, function(err, env) {
      if (err) { throw err; }
    });

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("conf_fs_1", "config/structures/log.json")): pre: code.language-javascript.
    {
      "engines": [ "log" ],
      "options": { "sys": true, "debug": true }
    }

.page-header: h2 Application mode

p If we pass config option "mode" in config root, infrastructure will try to find 

+doc_example_tab_items("configuration_2", {
  "application_mode":   "application mode",
})

div.code-block.large(class!=locals.getContentStateTemplate("configuration_2.application_mode"))
  .col-xs-2.fs-block
    +fs_block("conf_fs_2", {
      "app.js" :                      true,
      "config/structures/log.json":   false,
      "config/development.json":      false,
    })

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("conf_fs_2", "config/development.json")): pre: code.language-javascript.
    {
      "structures": {
        "log": {
          "options": { "sys": false }
        }
      }
    }

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("conf_fs_2", "app.js")): pre: code.language-javascript.
    var infrastructure = require("infrastructure");
    // config/development.json will "patch" config tree when mode is "development"
    infrastructure({ mode: "development" }, function(err, env) {
      if (err) { throw err; }
    });

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("conf_fs_2", "config/structures/log.json")): pre: code.language-javascript.
    {
      "engine":  "log" ,
      "options": { "sys": true, "debug": true }
    }
