include ../../../mixins/docs.jade
//- Creates tab button. first is by default 'active'
//- +doc_example_tab_items("states_root", {
//-   "cli":     "cli", 
//-   "package": "package.json"
//- })

//- Create tab content item
//- locals.getContentStateTemplate("states_root.cli") gets state template generated by doc_example_tab_items
//- div(class!=locals.getContentStateTemplate("states_root.cli")): pre: code.language-bash.
//-   npm install infrastructure
  
//- div(class!=locals.getContentStateTemplate("states_root.package")): pre: code.language-javascript.
//-   "dependencies": {
//-     "infrastructure": "^1.0.0"
//-   }

include ../../../mixins/fs_ui.jade


.page-header: h1 Tests

p For this example we will use mocha.

+doc_example_tab_items("tests_1", {
  "install_mocha":      "Install mocha",
  "package_json":       "package.json",
  "test_file":          "test file",
  "run_test":           "run test",
})


div.code-block.large(class!=locals.getContentStateTemplate("tests_1.install_mocha")): pre: code.language-bash.
  $> npm install mocha --save-dev

div.code-block.large(class!=locals.getContentStateTemplate("tests_1.run_test")): pre: code.language-bash.
  $> npm test

  > test@1.0.0 test /project/project
  > mocha test



    Start/stop application
  [sys]  [2015-11-29 16:37:14][logger]........................... options: sys, debug
  [sys]  [2015-11-29 16:37:14][worker]........................... log
  [sys]  [2015-11-29 16:37:14][worker started]................... 74ms, structures: log
  [sys]  [2015-11-29 16:37:14][application started].............. 891ms, process_mode: cluster, application mode: test
      ✓ Starts application (895ms)
  [sys]  [2015-11-29 16:37:14][worker instantiated].............. Worker_1
  [sys]  [2015-11-29 16:37:14][worker instantiated].............. Worker_2
  [sys]  [2015-11-29 16:37:14][worker]........................... workers
  [sys]  [2015-11-29 16:37:14][worker started]................... 59ms, structures: workers
    ✓ Calls our custom structure member and inspect the result
  try Gracefull shutdown for structure:  log
  Gracefull shutdown success for worker: log
  try Gracefull shutdown for structure:  workers
  Gracefull shutdown success for worker: workers
      ✓ Stops application


    3 passing (934ms)

div.code-block.large(class!=locals.getContentStateTemplate("tests_1.package_json")): pre: code.language-javascript.
  {
    "name": "test",
    "version": "1.0.0",
    "description": "",
    "main": "app.js",
    "scripts": {
      "test": "mocha test"
    },
    "dependencies": {
      "infrastructure": "git+https://github.com/shstefanov/infrastructure.git#dev"
    },
    "devDependencies": {
      "mocha": "^2.3.4"
    }
  }


div.code-block.large(class!=locals.getContentStateTemplate("tests_1.test_file"))
  .col-xs-2.fs-block
    +fs_block("tests_1_fs", {
      "app.js" :                          false,
      "config/structures/log.json":       false,
      "config/structures/workers.json":   false,
      "config/process_mode.json":         false,
      "workers/worker_1.js":              false,
      "workers/worker_2.js":              false,
      "test/test.js":                     true,
    })

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_1_fs", "test/test.js")): pre: code.language-javascript.
    var assert = require("assert");
    describe("Start/stop application", function(){
      
      var infrastructure_test_env = require("infrastructure/test_env");
      var env;

      it("Starts application", function(done){
        infrastructure_test_env.start({ process_mode: "single" }, function(err, test_env){
          assert.equal(err, null);
          env = test_env;
          done();
        });
      });

      it("Calls our custom structure member and inspect the result", function(done){
        env.i.do("workers.worker_1.worker_1_method", "hello worker 1", function(err, response){
          assert.equal(err, null);
          assert.deepEqual(response, [ 'hello worker 1', 'hello master' ]);
          done();
        });
      });

      it("Stops application", function(done){
        env.stop(function(err){
          assert.equal(err, null);
          done();
        });
      });

    });



  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_1_fs", "app.js")): pre: code.language-javascript.
    var infrastructure = require("infrastructure");
    infrastructure({ /* Write config here */ }, function(err, env) {
      if (err) { throw err; }

      // Check that workers are callable
      env.i.do("workers.worker_1.worker_1_method", "hello worker 1", function(err, response){
        console.log(response);
      });
      env.i.do("workers.worker_2.worker_2_method", "hello worker 2", function(err, response){
        console.log(response);
      });

    });

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_1_fs", "workers/worker_1.js")): pre: code.language-javascript.
    function Worker_1(env){
      env.i.do("log.sys", "worker instantiated", "Worker_1");
    }
    Worker_1.prototype.worker_1_method = function(text, cb){
      cb(null, [text, "hello master"]);
    }
    module.exports = Worker_1;

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_1_fs", "workers/worker_2.js")): pre: code.language-javascript.
    function Worker_2(env){
      env.i.do("log.sys", "worker instantiated", "Worker_2");
    }
    Worker_2.prototype.worker_2_method = function(text, cb){
      cb(null, [text, "hello master"]);
    }
    module.exports = Worker_2;

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_1_fs", "config/process_mode.json")): pre: code.language-javascript.
    "cluster"

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_1_fs", "config/structures/log.json")): pre: code.language-javascript.
    {
      "engines": [ "log" ],
      "options": { "sys": true, "debug": true }
    }
  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_1_fs", "config/structures/workers.json")): pre: code.language-javascript.
    {
      "path": "workers",
      "engines": []
    }

p
p Well, test passes, but we still see system logs. Test runs under application mode "test", so we will attach "test" branch to our config root.

+doc_example_tab_items("tests_2", {
  "test_config":        "test config",
  "run_test":           "run test",
})


div.code-block.large(class!=locals.getContentStateTemplate("tests_2.test_config"))
  .col-xs-2.fs-block
    +fs_block("tests_2_fs", {
      "app.js" :                          false,
      "config/structures/log.json":       false,
      "config/structures/workers.json":   false,
      "config/process_mode.json":         false,
      "workers/worker_1.js":              false,
      "workers/worker_2.js":              false,
      "test/test.js":                     false,
      "config/test.json":                 true,
    })

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_2_fs", "config/test.json")): pre: code.language-javascript.
    {
      "structures": {
        "log": {
          "options": {
            "sys": false
          }
        }
      }
    }

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_2_fs", "test/test.js")): pre: code.language-javascript.
    var assert = require("assert");
    describe("Start/stop application", function(){
      
      var infrastructure_test_env = require("infrastructure/test_env");
      var env;

      it("Starts application", function(done){
        infrastructure_test_env.start({ process_mode: "single" }, function(err, test_env){
          assert.equal(err, null);
          env = test_env;
          done();
        });
      });

      it("Calls our custom structure member and inspect the result", function(done){
        env.i.do("workers.worker_1.worker_1_method", "hello worker 1", function(err, response){
          assert.equal(err, null);
          assert.deepEqual(response, [ 'hello worker 1', 'hello master' ]);
          done();
        });
      });

      it("Stops application", function(done){
        env.stop(function(err){
          assert.equal(err, null);
          done();
        });
      });

    });



  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_2_fs", "app.js")): pre: code.language-javascript.
    var infrastructure = require("infrastructure");
    infrastructure({ /* Write config here */ }, function(err, env) {
      if (err) { throw err; }
    });

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_2_fs", "workers/worker_1.js")): pre: code.language-javascript.
    function Worker_1(env){
      env.i.do("log.sys", "worker instantiated", "Worker_1");
    }
    Worker_1.prototype.worker_1_method = function(text, cb){
      cb(null, [text, "hello master"]);
    }
    module.exports = Worker_1;

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_2_fs", "workers/worker_2.js")): pre: code.language-javascript.
    function Worker_2(env){
      env.i.do("log.sys", "worker instantiated", "Worker_2");
    }
    Worker_2.prototype.worker_2_method = function(text, cb){
      cb(null, [text, "hello master"]);
    }
    module.exports = Worker_2;

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_2_fs", "config/process_mode.json")): pre: code.language-javascript.
    "cluster"

  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_2_fs", "config/structures/log.json")): pre: code.language-javascript.
    {
      "engines": [ "log" ],
      "options": { "sys": true, "debug": true }
    }
  .col-xs-10.code-block.large(class!=locals.getStateFromFs("tests_2_fs", "config/structures/workers.json")): pre: code.language-javascript.
    {
      "path": "workers",
      "engines": []
    }

div.code-block.large(class!=locals.getContentStateTemplate("tests_2.run_test")): pre: code.language-bash.
  $> npm test

  > test@1.0.0 test /project/project
  > mocha test



    Start/stop application
      ✓ Starts application (460ms)
      ✓ Calls our custom structure member and inspect the result
      ✓ Stops application


    3 passing (487ms)

p
p The config tree is patched and system logs are not shown whem application mode is "test"