include ../../../mixins/docs.jade
//- Creates tab button. first is by default 'active'
//- +doc_example_tab_items("states_root", {
//-   "cli":     "cli", 
//-   "package": "package.json"
//- })

//- Create tab content item
//- locals.getContentStateTemplate("states_root.cli") gets state template generated by doc_example_tab_items
//- div(class!=locals.getContentStateTemplate("states_root.cli")): pre: code.language-bash.
//-   npm install infrastructure
  
//- div(class!=locals.getContentStateTemplate("states_root.package")): pre: code.language-javascript.
//-   "dependencies": {
//-     "infrastructure": "^1.0.0"
//-   }


.page-header: h1 The Logger

p The logger is a built-in structure inside infrastructure application, so we need to define it in the config:
+doc_example_tab_items("logger_1", {
  "app":     "app.js",
  "cli":     "command line"
})
  
div.code-block.large(class!=locals.getContentStateTemplate("logger_1.app")): pre: code.language-javascript.
  var infrastructure = require("infrastructure");
  infrastructure({
    structures: {
      log: {
        engines: [ "log" ],
        options: { sys: true }
      }
    }
  }, function(err, env) {
    if (err) {
      throw err;
    }
  });

div.code-block.large(class!=locals.getContentStateTemplate("logger_1.cli")): pre: code.language-bash.
  $> node app.js
  [sys]  [2015-11-08 21:40:37][logger]........................... options: sys
  [sys]  [2015-11-08 21:40:37][application started].............. 30ms, process_mode: single, application mode: undefined
  $>

p
p 
  | First - it's a 
  a(href="/infrastructure/{{state.screen}}/Structures"): mark.
    structure.
  | It uses built-in engine, called 
  mark log
  |. Also, it's config has options. The 
  mark options
  |  object represents which log types are turned on.
  | Only 
  mark sys 
  | option is used by the system to report some initialization stuff. 
  | Any other option is custom. Let's create log type 
  mark debug
  | and use it to log some message.

p The logger is a built-in structure inside infrastructure application, so we need to define it in the config:
+doc_example_tab_items("logger_2", {
  "app":     "app.js",
  "cli":     "command line"
})
iv.code-block.large(class!=locals.getContentStateTemplate("logger_2.app")): pre: code.language-javascript.
  var infrastructure = require("infrastructure");
  infrastructure({
    structures: {
      log: {
        engines: [ "log"],
        options: { sys: true, debug: true }
      }
    }
  }, function(err, env) {
    if (err) {
      throw err;
    }
    env.i.do("log.debug", "hello", "logger");
  });

div.code-block.large(class!=locals.getContentStateTemplate("logger_2.cli")): pre: code.language-bash.
  $> node app.js
  [sys]  [2015-11-08 21:42:53][logger]........................... options: sys, debug
  [sys]  [2015-11-08 21:42:53][application started].............. 30ms, process_mode: single, application mode: undefined
  [debug]  [2015-11-08 21:42:53][hello]............................ logger
  $>