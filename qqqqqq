[1mdiff --git a/lib/MysqlLayer.js b/lib/MysqlLayer.js[m
[1mindex d041e7d..cd20d88 100644[m
[1m--- a/lib/MysqlLayer.js[m
[1m+++ b/lib/MysqlLayer.js[m
[36m@@ -1,45 +1,93 @@[m
 var _          = require("underscore");[m
 var DataLayer  = require("./DataLayer");[m
 [m
[32m+[m[32mvar operatorsRE = [[m
[32m+[m[32m  /^=$/i,[m
[32m+[m[32m  /^between$/i,[m
[32m+[m[32m  /^not\sbetween$/i,[m
[32m+[m[32m  /^[<>]=?$/i,[m
[32m+[m[32m  /^<=?>$/i,[m
[32m+[m[32m  /^!=$/i,[m
[32m+[m[32m  /^in$/i,[m
[32m+[m[32m  /^not\sin$/i,[m
[32m+[m[32m  /^is$/i,[m
[32m+[m[32m  /^is\snot$/i,[m
[32m+[m[32m  /^like$/i,[m
[32m+[m[32m  /^not\slike$/i,[m
[32m+[m[32m  /^not$/i,[m
[32m+[m[32m];[m
[32m+[m
[32m+[m[32mfunction isOperator(val){[m
[32m+[m[32m  return _.some(operatorsRE, function(re){[m
[32m+[m[32m    return re.test(val);[m
[32m+[m[32m  });[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mfunction wrapArrayValues(operator, values, field, mysql){[m
[32m+[m[32m  switch(operator.toUpperCase()){[m
[32m+[m[32m    case "=":[m
[32m+[m[32m    case "!=":[m
[32m+[m[32m    case ">":[m
[32m+[m[32m    case "<":[m
[32m+[m[32m    case "<>":[m
[32m+[m[32m    case "<=>":[m
[32m+[m[32m    case ">=":[m
[32m+[m[32m    case "<=":[m
[32m+[m[32m    case "NOT":[m
[32m+[m[32m    case "IS":[m
[32m+[m[32m    case "IS NOT":[m
[32m+[m[32m    case "LIKE":[m
[32m+[m[32m    case "NOT LIKE":[m
[32m+[m[32m      return [field, operator.toUpperCase(), mysql.escape(values[0])];[m
[32m+[m[32m    case "BETWEEN":[m
[32m+[m[32m      return Array.isArray(values[0])? [field, "BETWEEN", mysql.escape(values[0][0]), "AND", mysql.escape(values[0][1])][m
[32m+[m[32m        :[field, "BETWEEN", mysql.escape(values[0]), "AND", mysql.escape(values[1])];[m
[32m+[m[32m    case "IN":[m
[32m+[m[32m    case "NOT IN":[m
[32m+[m[32m    default:[m
[32m+[m[32m      return [field, operator.toUpperCase(), "(", mysql.escape(Array.isArray(values[0])?values[0]:values ), ")"];[m
[32m+[m[32m  }[m
[32m+[m[32m}[m
[32m+[m
 module.exports = DataLayer.extend("MongoLayer", {[m
 [m
 [m
 [m
 [m
 [m
[31m-// SELECT count(distinct p.products_id) as total [m
[31m-// FROM products p [m
[31m-// LEFT JOIN manufacturers m USING(manufacturers_id)[m
[31m-// LEFT JOIN products_description pd using products_id[m
[31m-// LEFT JOIN categories c USING (categories_id)[m
[31m-// LEFT JOIN products_to_categories p2c USING (products_id)[m
[31m-// LEFT JOIN meta_tags_products_description mtpd [m
[31m-//           ON mtpd.products_id= p2c.products_id [m
[31m-//           AND mtpd.language_id = 1 [m
[31m-// WHERE (p.products_status = 1  [m
[31m-//        AND pd.language_id = 1  [m
[31m-//        AND ([m
[31m-//             (pd.products_name LIKE '%3220%' [m
[31m-//              OR p.products_model LIKE '%3220%' [m
[31m-//              OR m.manufacturers_name LIKE '%3220%' [m
[31m-//              OR (mtpd.metatags_keywords LIKE '%3220%' [m
[31m-//                  AND  mtpd.metatags_keywords !='') [m
[31m-//              OR [m
[31m-//              (mtpd.metatags_description LIKE '%3220%' [m
[31m-//               AND   mtpd.metatags_description !='') [m
[31m-//              OR [m
[31m-//               pd.products_description LIKE '%3220%'[m
[31m-//             ) [m
[31m-//            ) [m
[31m-//       )[m
[31m-//       OR (p.products_id=3220)[m
[32m+[m[32m  // SELECT count(distinct p.products_id) as total[m[41m [m
[32m+[m[32m  // FROM products p[m[41m [m
[32m+[m[32m  // LEFT JOIN manufacturers m USING(manufacturers_id)[m
[32m+[m[32m  // LEFT JOIN products_description pd using products_id[m
[32m+[m[32m  // LEFT JOIN categories c USING (categories_id)[m
[32m+[m[32m  // LEFT JOIN products_to_categories p2c USING (products_id)[m
[32m+[m[32m  // LEFT JOIN meta_tags_products_description mtpd[m[41m [m
[32m+[m[32m  //           ON mtpd.products_id= p2c.products_id[m[41m [m
[32m+[m[32m  //           AND mtpd.language_id = 1[m[41m [m
[32m+[m[32m  // WHERE (p.products_status = 1[m[41m  [m
[32m+[m[32m  //        AND pd.language_id = 1[m[41m  [m
[32m+[m[32m  //        AND ([m
[32m+[m[32m  //             (pd.products_name LIKE '%3220%'[m[41m [m
[32m+[m[32m  //              OR p.products_model LIKE '%3220%'[m[41m [m
[32m+[m[32m  //              OR m.manufacturers_name LIKE '%3220%'[m[41m [m
[32m+[m[32m  //              OR (mtpd.metatags_keywords LIKE '%3220%'[m[41m [m
[32m+[m[32m  //                  AND  mtpd.metatags_keywords !='')[m[41m [m
[32m+[m[32m  //              OR[m[41m [m
[32m+[m[32m  //              (mtpd.metatags_description LIKE '%3220%'[m[41m [m
[32m+[m[32m  //               AND   mtpd.metatags_description !='')[m[41m [m
[32m+[m[32m  //              OR[m[41m [m
[32m+[m[32m  //               pd.products_description LIKE '%3220%'[m
[32m+[m[32m  //             )[m[41m [m
[32m+[m[32m  //            )[m[41m [m
[32m+[m[32m  //       )[m
[32m+[m[32m  //       OR (p.products_id=3220)[m
 [m
   parseArguments: function(args){[m
     switch(args.length){[m
       case 0: return false;[m
       case 1:[m
         if(typeof args[0] !== "function") return false;[m
[31m-        else return [{},{},args[0]];[m
[32m+[m[32m        else return [undefined,{},args[0]];[m
       case 2:[m
         if(typeof args[1] !== "function") return false;[m
         else return [args[0],{}, args[1]];[m
[36m@@ -56,7 +104,7 @@[m [mmodule.exports = DataLayer.extend("MongoLayer", {[m
     if(options.fields){[m
       result.options.fields = _.intersection(this.publicFields || _.keys(this.fields), options.fields);[m
     }[m
[31m-    else result.options.fields = _.keys(dataFields);[m
[32m+[m[32m    else result.options.fields = this.publicFields || "*";[m
 [m
     if(result.options.fields.length === 0) {[m
       result.options.fields = this.publicFields || "*";[m
[36m@@ -81,7 +129,47 @@[m [mmodule.exports = DataLayer.extend("MongoLayer", {[m
     else result.options.order = "";[m
 [m
 [m
[32m+[m
[32m+[m[32m    // if(!options.where && typeof data !== "undefined"){[m
[32m+[m[32m    //   options.where = {};[m
[32m+[m[32m    //   options.where[this.primaryKey] = data;[m
[32m+[m[32m    // }[m
[32m+[m
[32m+[m
     if(options.where){[m
[32m+[m[32m      var cond_fields = _.intersection(this.publicFields || _.keys(this.fields), _.keys(options.where));[m
[32m+[m[32m      if(cond_fields.length===0) result.options.where = "";[m
[32m+[m[32m      else{[m
[32m+[m[32m        var conditions  = [];[m
[32m+[m[32m        var allowed_conditions = _.pick(options.where, cond_fields);[m
[32m+[m[32m        for(var cond_field in allowed_conditions){[m
[32m+[m[32m          var cond_value = allowed_conditions[cond_field];[m
[32m+[m[32m          if(_.some([_.isNumber, _.isString, _.isDate, _.isNull], function(iterator){ return iterator(cond_value); })){[m
[32m+[m[32m            conditions.push([cond_field, "=", this.mysql.escape(cond_value)].join(" "));[m
[32m+[m[32m          }[m
[32m+[m[32m          else if(Array.isArray(cond_value)){[m
[32m+[m[32m            if(isOperator(cond_value[0])){[m
[32m+[m[32m              var operator = cond_value[0];[m
[32m+[m[32m              var rest     = cond_value.slice(1);[m
[32m+[m[32m              conditions.push(wrapArrayValues(operator, rest, cond_field, this.mysql).join(" "));[m
[32m+[m[32m            }[m
[32m+[m[32m            else{[m
[32m+[m[32m              conditions.push(wrapArrayValues("IN", cond_value, cond_field, this.mysql).join(" "));[m
[32m+[m[32m            }[m
[32m+[m[32m          }[m
[32m+[m[32m          else if(_.isFunction(cond_value)){[m
[32m+[m[32m            throw new Error("TODO - computed where condition");[m
[32m+[m[32m          }[m
[32m+[m[32m          else if(_.isObject(cond_value)){[m
[32m+[m[32m            throw new Error("TODO - where condition as object");[m
[32m+[m[32m          }[m
[32m+[m[32m          else result.options.where = "";[m
[32m+[m
[32m+[m[32m        }[m
[32m+[m[32m          result.options.where = "WHERE "+conditions.join(" AND ");[m
[32m+[m[32m      }[m
[32m+[m[32m    }[m
[32m+[m[32m    else if(false){[m
 [m
     }[m
     else result.options.where = "";[m
[36m@@ -104,11 +192,19 @@[m [mmodule.exports = DataLayer.extend("MongoLayer", {[m
   },[m
 [m
   find:    function(pattern, options, cb){[m
[31m-    if(typeof pattern === "number" || typeof pattern === "string" || pattern.hasOwnProperty(this.primaryKey)){[m
[31m-      return [m
[32m+[m[32m    if(typeof pattern === "number" || typeof pattern === "string"){[m
[32m+[m[32m      options.where = {}, options.limit = 1;[m
[32m+[m[32m      options.where[this.primaryKey] = pattern;[m[41m [m
[32m+[m[32m    }[m
[32m+[m[32m    else if(Array.isArray(pattern)){[m
[32m+[m[32m      options.where = {}, options.limit = pattern.length;[m
[32m+[m[32m      options.where[this.primaryKey] = ["IN", pattern];[m
[32m+[m[32m    }[m
[32m+[m[32m    else{[m
[32m+[m[32m      options.where = pattern;[m
     }[m
     var data = this.parseData(pattern, options), self = this;[m
[31m-    this.query("SELECT @fields FROM @tableName @where @order @limit;", data, function(err, models){[m
[32m+[m[32m    this.query("SELECT @fields FROM @tableName @where @order @limit @order;", data, function(err, models){[m
       // avoid third argument[m
       cb(err, models);[m
     });[m
